/*
# 变量声明

`var声明语句`可以创建一个特定类型的变量，然后给变量附加一个名字，并且初始化该变量的值。变量声明的语法一般如下：
```
var 变量名字 类型 = 表达式
```
其中*类型*或*表达式*可以省略其一。
如果省略了类型，那么将通过表达式来推到变量的类型。
如果省略的是表达式，则用类型的零值初始化变量。数值类型变量对应的零值是0，布尔类型变量对应的零值是false，字符串类型对应的零值是空字符串，接口或引用类型（包括slice，指针，map，chan和函数）对应的零值是nil。数组或结构体等聚合类型对应的零值是每个元素或字段对应类型的零值。
*/

package main

import "fmt"

func func_a() (int, int) {
	return 1, 2
}

func var_declare() {
	// 完整的声明
	var a string = "hello"

	// 省略类型
	var b = "hello"

	// 省略表达式
	var c string

	// 一次声明多个变量
	var d, e, f = 1, "world", true

	// 函数返回值声明变量
	var g, h = func_a()

	var p []string

	/*
	 简短声明: 它以“名字 := 表达式”形式声明变量，变量的类型根据表达式自动推导
	 请记住：`:=`是一个变量声明语句，而`=`是一个赋值操作。也不要混淆多个变量的声明和元组的多重赋值
	*/
	i := 3.14
	j, k := "foo", true
	l, m := func_a()
	q := []string{}
	s, t := 1, 2
	t, s = s, t // 元组的多重赋值

	// 简短变量声明在用于函数返回值声明时，左边的变量不一定需要都是新声明的变量，它可以是前面已经声明过的
	l, u := func_a()

	// 简短变量声明语句需要至少声明一个新变量，否则编译会报错
	// l, m := func_a()

	print(a, b, c, d, e, f, g, h, i, j, k, l, m, p, q, u)
}

func pointer_var() {
	x := 1

	// &x表达式可以取变量x的内存地址
	p := &x
	print(p)

	// 使用*p可以读取指针变量p指向的内容
	print(*p)

	// *p表达式可以出现在赋值语句的左边，表示更新指针所指向内存变量的值
	*p = 2
	print(2)
}

/*
另一个创建变量的方法是用内建的函数new，表达式new(T)创建一个T类型的匿名变量，初始化为类型T的零值，返回变量的地址，返回的指针类型为*T
*/
func new_var() {
	p := new(int)
	fmt.Println(*p)

	a := new([]int)
	fmt.Println(*a)
}

package main

import "fmt"

/*
函数

函数可以让我们将一个语句打包成一个单元，然后可以从程序的其它地方多次调用。
函数的机制可以让我们将一个大的工作分解成小的任务，这样的小任务可以让不同的程序员在不同的时间、不同的地方独立完成。
一个函数同时对用户隐藏了实现细节。
*/

/*
函数声明

函数的声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。
如果一个函数不包含返回值列表，那么函数执行完毕后不会返回任何值。
func name(parameter-list) (result-list) {}
返回值也可以向形式参数一样被命名，在这种情况下，每个返回值都会被声明成一个局部变量，并根据该返回值的类型，将其初始化为0。
如果一个函数在声明时包含了返回值列表，该函数必须以return语句结尾。除非函数明显无法运行到结尾处。
*/
func add(x int, y int) int   { return x + y }
func sub(x, y int) (z int)   { z = x + y; return }
func first(x int, _ int) int { return x }
func zero(int, int) int      { return 0 }
func func_type() {
	fmt.Printf("%T\n", add)
	fmt.Printf("%T\n", sub)
	fmt.Printf("%T\n", first)
	fmt.Printf("%T\n", zero)
}

/*
函数的类型被称为函数的标识符。如果两个函数形式参数列表和返回值列表中的变量类型一一对应，那么这两个函数被认为有相同的类型和标识符。
形成和返回值的变量名不影响函数标识符也不影响它们是否可以以省略参数类型的形式表示

每一次函数调用都必须按照声明顺序为所有参数提供实参。
在调用时，Go语言没有默认参数值，也没有任何方法通过参数名指定形参，因此形参和返回值的变量名对于函数调用者而言没有意义。

在函数体中，函数的形参作为局部变量，被初始化为调用提供的值。函数的形参和有名返回值作为函数最外层的局部变量，被存储在相同的词法块中。

实参通过值的方式传递，因此函数的形参是实参的拷贝。对形参进行修改不会影响实参。
但是，如果实参包括引用类型，如指针，slice、map、function、channel等类型，实参可能会由于函数的间接引用而被修改。

有时候会遇到一些没有函数体的函数声明，这表示该函数不是以Go语言实现的。这样的声明定义函数标识符。
*/

func main() {
	func_type()
}

package main

/*
竞态检测器（The race detector）

即使以最大努力的仔细，仍然很容易在并发上犯错。幸运的是，
Go语言运行时和工具链装备了一个精致并易于使用的动态分析工具：竞态检测器

简单的把-race命令行参数加到go build、go run、go test里边即可使用该功能。它会让编译器为你的应用或测试构建一个修改后的版本，
这个版本有额外的手法用于高效的记录在执行时对共享变量的所有访问，以及读写这些变量的goroutine标识。
除此之外，修改后的版本还会记录所有的同步事件，包括go语句，channel操作，(*sync.Mutex).Lock，(*sync.WaitGroup).Wait调用等。

竞态检测器会研究事件流，找到那些有问题的案例，即一个goroutine写入变量后，中间没有任何的同步操作，就有另一个goroutine读写这个变量。
这种案例表明了对共享变量的并发访问，即数据竞态。
竞态检测器只能检测到那些在运行时发生的竞态，无法用来保证肯定不会发生竞态。

由于额外的薄记（bookkeeping）工作，带竞态检测功能的程序在执行时需要更长的时间和更多的内存，但即使对于很多生产环境的任务，
这种额外的开销也是可以接收的。对于那些不长发生的竞态，使用竞态检测器可以帮你节省数小时或者数天的调试时间。
*/

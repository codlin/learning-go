package main

/*
测试函数

每一个测试文件必须导入包testing。
这些函数的函数签名如下：
func TestXxx(t *testing.T) {
	//...
}
功能测试函数必须以Test开头，可选的后缀名称必须以大写字母开头。
参数t提供了汇报测试失败和日志记录功能。

`go test`在不指定包参数的情况下，以当前目录所在包为参数。
可以进入word目录，使用go test命令执行包word的测试。
`go test -v`可以输出每个测试用例的名称、结果和执行时长。
选项-run的参数是一个正则表达式，它可以使得go test只运行那些测试函数名称匹配给定模式的函数。
go test -v -run="French|Canal"
*/

/*
看例子word2目录，在word_test.go的TestIsPalindrome函数中，这种基于表的测试方式在Go中很常见。
根据需要添加表项很直观，并且断言逻辑没有重复。
当前调用t.Errorf输出的失败的测试用例信息并没有包含整个跟踪栈信息，也不会导致程序宕机或终止执行，
这和其它很多语言的测试框架中的断言不同。测试用例彼此是独立的。如果测试用例中的一条失败并不影响其它
测试用例，那么我们就可以在一次测试过程中发现多个失败的情况。

如果我们真的需要在一个测试用例失败时终止测试，那么我们可以使用t.Fatal或t.Fatalf函数来终止测试。
这些函数的调用必须和Test函数在同一个goroutine中，而不是在测试创建的其它goroutine中。

测试错误消息一般格式是“f(x)=y, want z”，这里f(x)表示需要执行的操作和它的输入，y是实际的输出结果，
z是期望得到的结果。
出于方便，对于f(x)我们会使用Go的语法，比如在w2的例子中，我们使用Go的格式化来显示较长的输入，避免重复输入。
在基于表的测试中，输出x是很重要的，因为一条断言语句会在不同的输入情况下执行多次。错误消息要避免样板文字和冗余信息。

*/

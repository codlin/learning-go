package main

/*
性能剖析

基准测试对检测具体操作的性能很有用，但是当我们在尝试使得一个程序变得更快的时候，我们经常不知道从何做起。
个程序员都了解关于唐纳德·克努斯的不要过早优化的箴言，这句话出现在1974年的“Structured Programming
with go to Statements”一文中。虽然经常被误解为性能并不重要，但是我们可以从原始的语境中得出如下信息：
-----------------------------------------------------------------------
毫无疑问对性能的崇拜会导致滥用。
程序员们浪费了大量的时间来思考或担心他们非关键部分代码的执行速度，
并且在考虑到程序的调试和维护的时候这些优化的尝试事实上会带来负面的影响。

我们必须忘记微小的性能提升，必须说在97%的情况下，过早优化是万恶之源。
我们必须忘记微小的性能提升，必须说在97%的情况下，过早优化是万恶之源。
我们必须忘记微小的性能提升，必须说在97%的情况下，过早优化是万恶之源。

然而我们不可以错过那关键的3%的情况。

一个好的程序员不会因为这个就自满，明智的方法是他应该仔细地查看关键代码；
当然仅在关键代码明确之后。
通常情况下先入为主地认定程序哪些部分是关键代码是错误的，使用了检测工具的
程序员会发现的普遍经验就是他们的直觉是错的。
程序员会发现的普遍经验就是他们的直觉是错的。
程序员会发现的普遍经验就是他们的直觉是错的。
-----------------------------------------------------------------------
当我们希望仔细地查看程序的速度时，发现关键代码的最佳技术就是性能剖析。
性能剖析是通过自动化手段在程序执行过程中基于一些性能事件的采样来进行性能评测，
然后再从这些采样中推断分析，得到的统计报告就称作为性能剖析（profile）。
*/
